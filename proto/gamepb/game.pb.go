//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.0
// source: proto/gamepb/game.proto

package gamepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 请求/响应码
type CmdId int32

const (
	CmdId_DCI_None               CmdId = 0
	CmdId_DCI_ServerTime         CmdId = 1000  // Req: 空包 Res: ServerTimeRes 服务器时间
	CmdId_DCI_JoinRoom           CmdId = 1001  // Req: JoinRoomReq 加入房间
	CmdId_DCI_LeaveRoom          CmdId = 1002  // Req: 空包 离开房间
	CmdId_DCI_JoinGame           CmdId = 1003  // Req: JoinGameReq Res: 加入游戏
	CmdId_DCI_LeaveGame          CmdId = 1004  // Req: 空包 离开游戏
	CmdId_DCI_KickUser           CmdId = 1005  // Req:KickPlayerReq 踢出用户
	CmdId_DCI_StartGame          CmdId = 1006  // Req: 空包 开始游戏
	CmdId_DCI_ReadyGame          CmdId = 1007  // 准备游戏
	CmdId_DCI_CancelReady        CmdId = 1008  // 取消准备游戏
	CmdId_DCI_CloseGame          CmdId = 1009  // 强行关闭游戏
	CmdId_DCI_CancelTrusteeship  CmdId = 1010  // 取消托管 Req: 空包 Res: CancelTrusteeshipNotify
	CmdId_DCI_GameSetting        CmdId = 1011  // 游戏设置
	CmdId_DCI_GameBroad          CmdId = 2002  // Req: 空包 Res: GameBroad 获取游戏快照
	CmdId_DCI_SyncProcess        CmdId = 2006  // Req: 空包 Res: GameProcessData 同步游戏进程
	CmdId_DCI_RefreshMember      CmdId = 2013  // RefreshMemberReq 刷新权限
	CmdId_DCI_Rank               CmdId = 10000 // Req: Rankreq ResRankresp  获取排行榜
	CmdId_DCI_AddRobot           CmdId = 30000 // Req: 空包 添加机器人
	CmdId_DCI_GetCustomizeConfig CmdId = 30001 // Req：空包，Res：CustomizeConfig 获取自定义配置
	CmdId_DCI_Command            CmdId = 30002 // 命令
)

// Enum value maps for CmdId.
var (
	CmdId_name = map[int32]string{
		0:     "DCI_None",
		1000:  "DCI_ServerTime",
		1001:  "DCI_JoinRoom",
		1002:  "DCI_LeaveRoom",
		1003:  "DCI_JoinGame",
		1004:  "DCI_LeaveGame",
		1005:  "DCI_KickUser",
		1006:  "DCI_StartGame",
		1007:  "DCI_ReadyGame",
		1008:  "DCI_CancelReady",
		1009:  "DCI_CloseGame",
		1010:  "DCI_CancelTrusteeship",
		1011:  "DCI_GameSetting",
		2002:  "DCI_GameBroad",
		2006:  "DCI_SyncProcess",
		2013:  "DCI_RefreshMember",
		10000: "DCI_Rank",
		30000: "DCI_AddRobot",
		30001: "DCI_GetCustomizeConfig",
		30002: "DCI_Command",
	}
	CmdId_value = map[string]int32{
		"DCI_None":               0,
		"DCI_ServerTime":         1000,
		"DCI_JoinRoom":           1001,
		"DCI_LeaveRoom":          1002,
		"DCI_JoinGame":           1003,
		"DCI_LeaveGame":          1004,
		"DCI_KickUser":           1005,
		"DCI_StartGame":          1006,
		"DCI_ReadyGame":          1007,
		"DCI_CancelReady":        1008,
		"DCI_CloseGame":          1009,
		"DCI_CancelTrusteeship":  1010,
		"DCI_GameSetting":        1011,
		"DCI_GameBroad":          2002,
		"DCI_SyncProcess":        2006,
		"DCI_RefreshMember":      2013,
		"DCI_Rank":               10000,
		"DCI_AddRobot":           30000,
		"DCI_GetCustomizeConfig": 30001,
		"DCI_Command":            30002,
	}
)

func (x CmdId) Enum() *CmdId {
	p := new(CmdId)
	*p = x
	return p
}

func (x CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gamepb_game_proto_enumTypes[0].Descriptor()
}

func (CmdId) Type() protoreflect.EnumType {
	return &file_proto_gamepb_game_proto_enumTypes[0]
}

func (x CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdId.Descriptor instead.
func (CmdId) EnumDescriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{0}
}

type MemberType int32

const (
	MemberType_MT_None   MemberType = 0
	MemberType_MT_Owner  MemberType = 1 // 房主
	MemberType_MT_Admin  MemberType = 2 // 管理员
	MemberType_MT_Member MemberType = 3 // 成员
)

// Enum value maps for MemberType.
var (
	MemberType_name = map[int32]string{
		0: "MT_None",
		1: "MT_Owner",
		2: "MT_Admin",
		3: "MT_Member",
	}
	MemberType_value = map[string]int32{
		"MT_None":   0,
		"MT_Owner":  1,
		"MT_Admin":  2,
		"MT_Member": 3,
	}
)

func (x MemberType) Enum() *MemberType {
	p := new(MemberType)
	*p = x
	return p
}

func (x MemberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemberType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gamepb_game_proto_enumTypes[1].Descriptor()
}

func (MemberType) Type() protoreflect.EnumType {
	return &file_proto_gamepb_game_proto_enumTypes[1]
}

func (x MemberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemberType.Descriptor instead.
func (MemberType) EnumDescriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{1}
}

// GameStatus 游戏状态
type GameStatus int32

const (
	GameStatus_GS_None      GameStatus = 0
	GameStatus_GS_Wait      GameStatus = 1 // 等待中
	GameStatus_GS_Countdown GameStatus = 2 // 倒计时中
	GameStatus_GS_Start     GameStatus = 3 // 游戏开始
	GameStatus_GS_End       GameStatus = 4 // 游戏结束
)

// Enum value maps for GameStatus.
var (
	GameStatus_name = map[int32]string{
		0: "GS_None",
		1: "GS_Wait",
		2: "GS_Countdown",
		3: "GS_Start",
		4: "GS_End",
	}
	GameStatus_value = map[string]int32{
		"GS_None":      0,
		"GS_Wait":      1,
		"GS_Countdown": 2,
		"GS_Start":     3,
		"GS_End":       4,
	}
)

func (x GameStatus) Enum() *GameStatus {
	p := new(GameStatus)
	*p = x
	return p
}

func (x GameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gamepb_game_proto_enumTypes[2].Descriptor()
}

func (GameStatus) Type() protoreflect.EnumType {
	return &file_proto_gamepb_game_proto_enumTypes[2]
}

func (x GameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameStatus.Descriptor instead.
func (GameStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{2}
}

type GameProcess int32

const (
	GameProcess_GP_None GameProcess = 0
)

// Enum value maps for GameProcess.
var (
	GameProcess_name = map[int32]string{
		0: "GP_None",
	}
	GameProcess_value = map[string]int32{
		"GP_None": 0,
	}
)

func (x GameProcess) Enum() *GameProcess {
	p := new(GameProcess)
	*p = x
	return p
}

func (x GameProcess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameProcess) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gamepb_game_proto_enumTypes[3].Descriptor()
}

func (GameProcess) Type() protoreflect.EnumType {
	return &file_proto_gamepb_game_proto_enumTypes[3]
}

func (x GameProcess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameProcess.Descriptor instead.
func (GameProcess) EnumDescriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{3}
}

type LeaderboardType int32

const (
	LeaderboardType_LT_Today LeaderboardType = 0 // 日排行榜
	LeaderboardType_LT_Week  LeaderboardType = 1 // 周排行榜
	LeaderboardType_LT_Total LeaderboardType = 2 // 总排行榜
)

// Enum value maps for LeaderboardType.
var (
	LeaderboardType_name = map[int32]string{
		0: "LT_Today",
		1: "LT_Week",
		2: "LT_Total",
	}
	LeaderboardType_value = map[string]int32{
		"LT_Today": 0,
		"LT_Week":  1,
		"LT_Total": 2,
	}
)

func (x LeaderboardType) Enum() *LeaderboardType {
	p := new(LeaderboardType)
	*p = x
	return p
}

func (x LeaderboardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaderboardType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gamepb_game_proto_enumTypes[4].Descriptor()
}

func (LeaderboardType) Type() protoreflect.EnumType {
	return &file_proto_gamepb_game_proto_enumTypes[4]
}

func (x LeaderboardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaderboardType.Descriptor instead.
func (LeaderboardType) EnumDescriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{4}
}

type JumpReq_JumpResult int32

const (
	JumpReq_JR_Excellent JumpReq_JumpResult = 0 // Excellent判定
	JumpReq_JR_Perfect   JumpReq_JumpResult = 1 // Perfect判定
	JumpReq_JR_Good      JumpReq_JumpResult = 2 // Good判定
	JumpReq_JR_Fail      JumpReq_JumpResult = 3 // Fail判定 / 掉入平台外
	JumpReq_JR_Normal    JumpReq_JumpResult = 4 // Normal判定 / 跳跃后仍和跳跃前位于同一平台
)

// Enum value maps for JumpReq_JumpResult.
var (
	JumpReq_JumpResult_name = map[int32]string{
		0: "JR_Excellent",
		1: "JR_Perfect",
		2: "JR_Good",
		3: "JR_Fail",
		4: "JR_Normal",
	}
	JumpReq_JumpResult_value = map[string]int32{
		"JR_Excellent": 0,
		"JR_Perfect":   1,
		"JR_Good":      2,
		"JR_Fail":      3,
		"JR_Normal":    4,
	}
)

func (x JumpReq_JumpResult) Enum() *JumpReq_JumpResult {
	p := new(JumpReq_JumpResult)
	*p = x
	return p
}

func (x JumpReq_JumpResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JumpReq_JumpResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gamepb_game_proto_enumTypes[5].Descriptor()
}

func (JumpReq_JumpResult) Type() protoreflect.EnumType {
	return &file_proto_gamepb_game_proto_enumTypes[5]
}

func (x JumpReq_JumpResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JumpReq_JumpResult.Descriptor instead.
func (JumpReq_JumpResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{13, 0}
}

type RefreshMemberReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Member        MemberType             `protobuf:"varint,2,opt,name=member,proto3,enum=gamepb.MemberType" json:"member,omitempty"` // 角色
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshMemberReq) Reset() {
	*x = RefreshMemberReq{}
	mi := &file_proto_gamepb_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshMemberReq) ProtoMessage() {}

func (x *RefreshMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshMemberReq.ProtoReflect.Descriptor instead.
func (*RefreshMemberReq) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{0}
}

func (x *RefreshMemberReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RefreshMemberReq) GetMember() MemberType {
	if x != nil {
		return x.Member
	}
	return MemberType_MT_None
}

type CommandReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Str           string                 `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandReq) Reset() {
	*x = CommandReq{}
	mi := &file_proto_gamepb_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReq) ProtoMessage() {}

func (x *CommandReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReq.ProtoReflect.Descriptor instead.
func (*CommandReq) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{1}
}

func (x *CommandReq) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

type CustomizeConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigJson    string                 `protobuf:"bytes,1,opt,name=config_json,json=configJson,proto3" json:"config_json,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomizeConfig) Reset() {
	*x = CustomizeConfig{}
	mi := &file_proto_gamepb_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomizeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeConfig) ProtoMessage() {}

func (x *CustomizeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeConfig.ProtoReflect.Descriptor instead.
func (*CustomizeConfig) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{2}
}

func (x *CustomizeConfig) GetConfigJson() string {
	if x != nil {
		return x.ConfigJson
	}
	return ""
}

type JoinRoomReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                               // 玩家uid
	RoomId        string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`           // 房间id
	Member        MemberType             `protobuf:"varint,3,opt,name=member,proto3,enum=gamepb.MemberType" json:"member,omitempty"` // 角色
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                             // 玩家名
	Avatar        string                 `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`                         // 玩家头像
	PlatformId    string                 `protobuf:"bytes,6,opt,name=platformId,proto3" json:"platformId,omitempty"`                 // 平台ID
	Ext           string                 `protobuf:"bytes,7,opt,name=ext,proto3" json:"ext,omitempty"`                               // 客户端扩展配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinRoomReq) Reset() {
	*x = JoinRoomReq{}
	mi := &file_proto_gamepb_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomReq) ProtoMessage() {}

func (x *JoinRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomReq.ProtoReflect.Descriptor instead.
func (*JoinRoomReq) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{3}
}

func (x *JoinRoomReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *JoinRoomReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *JoinRoomReq) GetMember() MemberType {
	if x != nil {
		return x.Member
	}
	return MemberType_MT_None
}

func (x *JoinRoomReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JoinRoomReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *JoinRoomReq) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *JoinRoomReq) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

type JoinGameReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                        // 玩家uid
	Member        MemberType             `protobuf:"varint,2,opt,name=member,proto3,enum=gamepb.MemberType" json:"member,omitempty"`          // 角色? 可能改变
	GamePosition  int32                  `protobuf:"varint,3,opt,name=game_position,json=gamePosition,proto3" json:"game_position,omitempty"` // 座位号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinGameReq) Reset() {
	*x = JoinGameReq{}
	mi := &file_proto_gamepb_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGameReq) ProtoMessage() {}

func (x *JoinGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGameReq.ProtoReflect.Descriptor instead.
func (*JoinGameReq) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{4}
}

func (x *JoinGameReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *JoinGameReq) GetMember() MemberType {
	if x != nil {
		return x.Member
	}
	return MemberType_MT_None
}

func (x *JoinGameReq) GetGamePosition() int32 {
	if x != nil {
		return x.GamePosition
	}
	return 0
}

// 踢出游戏
type KickPlayerReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickPlayerReq) Reset() {
	*x = KickPlayerReq{}
	mi := &file_proto_gamepb_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickPlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickPlayerReq) ProtoMessage() {}

func (x *KickPlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickPlayerReq.ProtoReflect.Descriptor instead.
func (*KickPlayerReq) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{5}
}

func (x *KickPlayerReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// 游戏快照信息
type GameBroad struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameStatus    GameStatus             `protobuf:"varint,1,opt,name=game_status,json=gameStatus,proto3,enum=gamepb.GameStatus" json:"game_status,omitempty"` // 游戏状态
	Players       []*Player              `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`                                                 // 玩家信息
	StartTime     int64                  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                           // 状态开始时间
	EndTime       int64                  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                 // 状态结束时间（一般仅倒计时有，其他时候为0）
	ProcessData   *GameProcessData       `protobuf:"bytes,5,opt,name=process_data,json=processData,proto3" json:"process_data,omitempty"`                      // 游戏进程数据
	EndData       *GameEndData           `protobuf:"bytes,6,opt,name=end_data,json=endData,proto3" json:"end_data,omitempty"`                                  // 游戏结束数据
	ForceEnd      bool                   `protobuf:"varint,7,opt,name=force_end,json=forceEnd,proto3" json:"force_end,omitempty"`                              // 是否强制结束
	CloseBtnShow  bool                   `protobuf:"varint,8,opt,name=close_btn_show,json=closeBtnShow,proto3" json:"close_btn_show,omitempty"`                // 是否显示强制关闭按钮
	Config        *GameBroad_Config      `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`                                                   // 游戏配置
	Setting       *GameBroad_Setting     `protobuf:"bytes,10,opt,name=setting,proto3" json:"setting,omitempty"`                                                // 游戏设置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameBroad) Reset() {
	*x = GameBroad{}
	mi := &file_proto_gamepb_game_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameBroad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBroad) ProtoMessage() {}

func (x *GameBroad) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBroad.ProtoReflect.Descriptor instead.
func (*GameBroad) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{6}
}

func (x *GameBroad) GetGameStatus() GameStatus {
	if x != nil {
		return x.GameStatus
	}
	return GameStatus_GS_None
}

func (x *GameBroad) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameBroad) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GameBroad) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GameBroad) GetProcessData() *GameProcessData {
	if x != nil {
		return x.ProcessData
	}
	return nil
}

func (x *GameBroad) GetEndData() *GameEndData {
	if x != nil {
		return x.EndData
	}
	return nil
}

func (x *GameBroad) GetForceEnd() bool {
	if x != nil {
		return x.ForceEnd
	}
	return false
}

func (x *GameBroad) GetCloseBtnShow() bool {
	if x != nil {
		return x.CloseBtnShow
	}
	return false
}

func (x *GameBroad) GetConfig() *GameBroad_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GameBroad) GetSetting() *GameBroad_Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type GameEndData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RankList      []*Rank                `protobuf:"bytes,1,rep,name=rank_list,json=rankList,proto3" json:"rank_list,omitempty"` // 排行榜
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameEndData) Reset() {
	*x = GameEndData{}
	mi := &file_proto_gamepb_game_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameEndData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEndData) ProtoMessage() {}

func (x *GameEndData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEndData.ProtoReflect.Descriptor instead.
func (*GameEndData) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{7}
}

func (x *GameEndData) GetRankList() []*Rank {
	if x != nil {
		return x.RankList
	}
	return nil
}

type Rank struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rank          int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`                  // 排名（1为获胜者或获胜队伍）
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 玩家ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rank) Reset() {
	*x = Rank{}
	mi := &file_proto_gamepb_game_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rank) ProtoMessage() {}

func (x *Rank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rank.ProtoReflect.Descriptor instead.
func (*Rank) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{8}
}

func (x *Rank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Rank) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 玩家信息
type Player struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 基本信息
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 玩家ID
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   //  玩家名
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`               // 玩家头像
	Coins  int32  `protobuf:"varint,4,opt,name=coins,proto3" json:"coins,omitempty"`                // 玩家余额
	Robot  bool   `protobuf:"varint,5,opt,name=robot,proto3" json:"robot,omitempty"`                // 是否是机器人（后端用）
	// 房间内信息
	Member        MemberType `protobuf:"varint,22,opt,name=member,proto3,enum=gamepb.MemberType" json:"member,omitempty"`             // 角色
	Seat          int32      `protobuf:"varint,23,opt,name=seat,proto3" json:"seat,omitempty"`                                        // 座位号
	Ready         bool       `protobuf:"varint,24,opt,name=ready,proto3" json:"ready,omitempty"`                                      // 是否准备
	CountdownTime int64      `protobuf:"varint,25,opt,name=countdown_time,json=countdownTime,proto3" json:"countdown_time,omitempty"` // 取消准备踢出时间戳
	// 游戏内信息
	Hp            int32      `protobuf:"varint,40,opt,name=hp,proto3" json:"hp,omitempty"`                                                       // 玩家剩余血量
	Point         int32      `protobuf:"varint,41,opt,name=point,proto3" json:"point,omitempty"`                                                 // 分数（用于结算）
	Score         int32      `protobuf:"varint,42,opt,name=score,proto3" json:"score,omitempty"`                                                 // 积分（用于排行榜排名）
	Escape        bool       `protobuf:"varint,43,opt,name=escape,proto3" json:"escape,omitempty"`                                               // 是否逃跑
	Trusteeship   bool       `protobuf:"varint,44,opt,name=trusteeship,proto3" json:"trusteeship,omitempty"`                                     // 托管中
	Done          bool       `protobuf:"varint,45,opt,name=done,proto3" json:"done,omitempty"`                                                   // 完成（用于组队模式）
	SrvMember     MemberType `protobuf:"varint,51,opt,name=srv_member,json=srvMember,proto3,enum=gamepb.MemberType" json:"srv_member,omitempty"` // 服务器角色
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_proto_gamepb_game_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{9}
}

func (x *Player) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Player) GetCoins() int32 {
	if x != nil {
		return x.Coins
	}
	return 0
}

func (x *Player) GetRobot() bool {
	if x != nil {
		return x.Robot
	}
	return false
}

func (x *Player) GetMember() MemberType {
	if x != nil {
		return x.Member
	}
	return MemberType_MT_None
}

func (x *Player) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *Player) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *Player) GetCountdownTime() int64 {
	if x != nil {
		return x.CountdownTime
	}
	return 0
}

func (x *Player) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *Player) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Player) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Player) GetEscape() bool {
	if x != nil {
		return x.Escape
	}
	return false
}

func (x *Player) GetTrusteeship() bool {
	if x != nil {
		return x.Trusteeship
	}
	return false
}

func (x *Player) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *Player) GetSrvMember() MemberType {
	if x != nil {
		return x.SrvMember
	}
	return MemberType_MT_None
}

// 通用请求
type PushReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cmd           CmdId                  `protobuf:"varint,1,opt,name=cmd,proto3,enum=gamepb.CmdId" json:"cmd,omitempty"`
	Body          []byte                 `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushReq) Reset() {
	*x = PushReq{}
	mi := &file_proto_gamepb_game_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushReq) ProtoMessage() {}

func (x *PushReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushReq.ProtoReflect.Descriptor instead.
func (*PushReq) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{10}
}

func (x *PushReq) GetCmd() CmdId {
	if x != nil {
		return x.Cmd
	}
	return CmdId_DCI_None
}

func (x *PushReq) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// 通用响应、推送
type PushRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cmd           CmdId                  `protobuf:"varint,1,opt,name=cmd,proto3,enum=gamepb.CmdId" json:"cmd,omitempty"`
	Body          []byte                 `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Code          int32                  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"` // 错误码
	Msg           string                 `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushRes) Reset() {
	*x = PushRes{}
	mi := &file_proto_gamepb_game_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRes) ProtoMessage() {}

func (x *PushRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRes.ProtoReflect.Descriptor instead.
func (*PushRes) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{11}
}

func (x *PushRes) GetCmd() CmdId {
	if x != nil {
		return x.Cmd
	}
	return CmdId_DCI_None
}

func (x *PushRes) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *PushRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PushRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PushRes) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 服务器时间
type ServerTimeRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          int64                  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerTimeRes) Reset() {
	*x = ServerTimeRes{}
	mi := &file_proto_gamepb_game_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerTimeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTimeRes) ProtoMessage() {}

func (x *ServerTimeRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTimeRes.ProtoReflect.Descriptor instead.
func (*ServerTimeRes) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{12}
}

func (x *ServerTimeRes) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type JumpReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Result        JumpReq_JumpResult     `protobuf:"varint,2,opt,name=result,proto3,enum=gamepb.JumpReq_JumpResult" json:"result,omitempty"` // 跳跃结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JumpReq) Reset() {
	*x = JumpReq{}
	mi := &file_proto_gamepb_game_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JumpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JumpReq) ProtoMessage() {}

func (x *JumpReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JumpReq.ProtoReflect.Descriptor instead.
func (*JumpReq) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{13}
}

func (x *JumpReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *JumpReq) GetResult() JumpReq_JumpResult {
	if x != nil {
		return x.Result
	}
	return JumpReq_JR_Excellent
}

type GameProcessData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Process          GameProcess            `protobuf:"varint,1,opt,name=process,proto3,enum=gamepb.GameProcess" json:"process,omitempty"`
	ProcessStartTime int64                  `protobuf:"varint,2,opt,name=process_start_time,json=processStartTime,proto3" json:"process_start_time,omitempty"` // 阶段开始时间
	ProcessEndTime   int64                  `protobuf:"varint,3,opt,name=process_end_time,json=processEndTime,proto3" json:"process_end_time,omitempty"`       // 阶段结束时间
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GameProcessData) Reset() {
	*x = GameProcessData{}
	mi := &file_proto_gamepb_game_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameProcessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameProcessData) ProtoMessage() {}

func (x *GameProcessData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameProcessData.ProtoReflect.Descriptor instead.
func (*GameProcessData) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{14}
}

func (x *GameProcessData) GetProcess() GameProcess {
	if x != nil {
		return x.Process
	}
	return GameProcess_GP_None
}

func (x *GameProcessData) GetProcessStartTime() int64 {
	if x != nil {
		return x.ProcessStartTime
	}
	return 0
}

func (x *GameProcessData) GetProcessEndTime() int64 {
	if x != nil {
		return x.ProcessEndTime
	}
	return 0
}

type RankData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score         int64                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Rank          int32                  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"` // 排名(可选，会在query时携带) 从 1 开始
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RankData) Reset() {
	*x = RankData{}
	mi := &file_proto_gamepb_game_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankData) ProtoMessage() {}

func (x *RankData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankData.ProtoReflect.Descriptor instead.
func (*RankData) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{15}
}

func (x *RankData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RankData) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RankData) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type RankQueryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         int64                  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`              // APP ID
	GameId        int64                  `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`           // 游戏 ID
	Name          LeaderboardType        `protobuf:"varint,3,opt,name=name,proto3,enum=gamepb.LeaderboardType" json:"name,omitempty"` // 排行榜类型
	Date          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                              // 排行榜日期
	TopK          int32                  `protobuf:"varint,5,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`                 // 查询排名前k名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RankQueryReq) Reset() {
	*x = RankQueryReq{}
	mi := &file_proto_gamepb_game_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RankQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankQueryReq) ProtoMessage() {}

func (x *RankQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankQueryReq.ProtoReflect.Descriptor instead.
func (*RankQueryReq) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{16}
}

func (x *RankQueryReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *RankQueryReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RankQueryReq) GetName() LeaderboardType {
	if x != nil {
		return x.Name
	}
	return LeaderboardType_LT_Today
}

func (x *RankQueryReq) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *RankQueryReq) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

type RankQueryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*RankData            `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RankQueryResp) Reset() {
	*x = RankQueryResp{}
	mi := &file_proto_gamepb_game_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RankQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankQueryResp) ProtoMessage() {}

func (x *RankQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankQueryResp.ProtoReflect.Descriptor instead.
func (*RankQueryResp) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{17}
}

func (x *RankQueryResp) GetData() []*RankData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 游戏配置
type GameBroad_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticket        []int32                `protobuf:"varint,1,rep,packed,name=ticket,proto3" json:"ticket,omitempty"` // 门票配置选项
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameBroad_Config) Reset() {
	*x = GameBroad_Config{}
	mi := &file_proto_gamepb_game_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameBroad_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBroad_Config) ProtoMessage() {}

func (x *GameBroad_Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBroad_Config.ProtoReflect.Descriptor instead.
func (*GameBroad_Config) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GameBroad_Config) GetTicket() []int32 {
	if x != nil {
		return x.Ticket
	}
	return nil
}

// 游戏设置
type GameBroad_Setting struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Ticket           int32                  `protobuf:"varint,1,opt,name=ticket,proto3" json:"ticket,omitempty"`                                               // 门票选项
	CustomTicket     int32                  `protobuf:"varint,2,opt,name=custom_ticket,json=customTicket,proto3" json:"custom_ticket,omitempty"`               // 自定义门票(如果大于0表示使用自定义门票)
	GameRound        int32                  `protobuf:"varint,3,opt,name=game_round,json=gameRound,proto3" json:"game_round,omitempty"`                        // 游戏轮数
	ActionTimeoutSec int64                  `protobuf:"varint,4,opt,name=action_timeout_sec,json=actionTimeoutSec,proto3" json:"action_timeout_sec,omitempty"` // 玩家行动倒计时(以秒为单位)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GameBroad_Setting) Reset() {
	*x = GameBroad_Setting{}
	mi := &file_proto_gamepb_game_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameBroad_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBroad_Setting) ProtoMessage() {}

func (x *GameBroad_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gamepb_game_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBroad_Setting.ProtoReflect.Descriptor instead.
func (*GameBroad_Setting) Descriptor() ([]byte, []int) {
	return file_proto_gamepb_game_proto_rawDescGZIP(), []int{6, 1}
}

func (x *GameBroad_Setting) GetTicket() int32 {
	if x != nil {
		return x.Ticket
	}
	return 0
}

func (x *GameBroad_Setting) GetCustomTicket() int32 {
	if x != nil {
		return x.CustomTicket
	}
	return 0
}

func (x *GameBroad_Setting) GetGameRound() int32 {
	if x != nil {
		return x.GameRound
	}
	return 0
}

func (x *GameBroad_Setting) GetActionTimeoutSec() int64 {
	if x != nil {
		return x.ActionTimeoutSec
	}
	return 0
}

var File_proto_gamepb_game_proto protoreflect.FileDescriptor

var file_proto_gamepb_game_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x50, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x74, 0x72, 0x22, 0x32, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x70, 0x0a,
	0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x21, 0x0a, 0x0d, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0xf2, 0x04, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x12, 0x33, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x74, 0x6e, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x74, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a,
	0x20, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x1a, 0x93, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x22, 0x38, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x33, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb3, 0x03, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x65, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x65, 0x73, 0x68, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x72, 0x76,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x73, 0x72, 0x76, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x07,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x82, 0x01, 0x0a,
	0x07, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x4a, 0x75, 0x6d, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x4a, 0x75,
	0x6d, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x4a, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x57, 0x0a, 0x0a, 0x4a, 0x75, 0x6d, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x52, 0x5f, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x52, 0x5f, 0x50,
	0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x52, 0x5f, 0x47,
	0x6f, 0x6f, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x52, 0x5f, 0x46, 0x61, 0x69, 0x6c,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x52, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x04, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x08,
	0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0xb0, 0x01, 0x0a, 0x0c,
	0x52, 0x61, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x5f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x22, 0x35,
	0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xa5, 0x03, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x43, 0x49, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0e, 0x44, 0x43, 0x49, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0xe8, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x43, 0x49, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f,
	0x6f, 0x6d, 0x10, 0xe9, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x43, 0x49, 0x5f, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xea, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x43, 0x49,
	0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0xeb, 0x07, 0x12, 0x12, 0x0a, 0x0d,
	0x44, 0x43, 0x49, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0xec, 0x07,
	0x12, 0x11, 0x0a, 0x0c, 0x44, 0x43, 0x49, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x10, 0xed, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x43, 0x49, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x10, 0xee, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x43, 0x49, 0x5f, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x10, 0xef, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x44,
	0x43, 0x49, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0xf0,
	0x07, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x43, 0x49, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x10, 0xf1, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x43, 0x49, 0x5f, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x65, 0x73, 0x68, 0x69, 0x70, 0x10, 0xf2,
	0x07, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x43, 0x49, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0xf3, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x43, 0x49, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x10, 0xd2, 0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x44,
	0x43, 0x49, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0xd6,
	0x0f, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x43, 0x49, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0xdd, 0x0f, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x43, 0x49,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0x90, 0x4e, 0x12, 0x12, 0x0a, 0x0c, 0x44, 0x43, 0x49, 0x5f,
	0x41, 0x64, 0x64, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x10, 0xb0, 0xea, 0x01, 0x12, 0x1c, 0x0a, 0x16,
	0x44, 0x43, 0x49, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0xb1, 0xea, 0x01, 0x12, 0x11, 0x0a, 0x0b, 0x44, 0x43,
	0x49, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0xb2, 0xea, 0x01, 0x2a, 0x44, 0x0a,
	0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x54, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x5f, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x5f, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x54, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x10, 0x03, 0x2a, 0x52, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x53, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x53, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x53, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x53, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x53, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x1a, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x50, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x2a, 0x3a, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x54, 0x5f, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x54, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x54, 0x5f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x10, 0x02, 0x42,
	0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_gamepb_game_proto_rawDescOnce sync.Once
	file_proto_gamepb_game_proto_rawDescData []byte
)

func file_proto_gamepb_game_proto_rawDescGZIP() []byte {
	file_proto_gamepb_game_proto_rawDescOnce.Do(func() {
		file_proto_gamepb_game_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_gamepb_game_proto_rawDesc), len(file_proto_gamepb_game_proto_rawDesc)))
	})
	return file_proto_gamepb_game_proto_rawDescData
}

var file_proto_gamepb_game_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_gamepb_game_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_gamepb_game_proto_goTypes = []any{
	(CmdId)(0),                    // 0: gamepb.CmdId
	(MemberType)(0),               // 1: gamepb.MemberType
	(GameStatus)(0),               // 2: gamepb.GameStatus
	(GameProcess)(0),              // 3: gamepb.GameProcess
	(LeaderboardType)(0),          // 4: gamepb.LeaderboardType
	(JumpReq_JumpResult)(0),       // 5: gamepb.JumpReq.JumpResult
	(*RefreshMemberReq)(nil),      // 6: gamepb.RefreshMemberReq
	(*CommandReq)(nil),            // 7: gamepb.CommandReq
	(*CustomizeConfig)(nil),       // 8: gamepb.CustomizeConfig
	(*JoinRoomReq)(nil),           // 9: gamepb.JoinRoomReq
	(*JoinGameReq)(nil),           // 10: gamepb.JoinGameReq
	(*KickPlayerReq)(nil),         // 11: gamepb.KickPlayerReq
	(*GameBroad)(nil),             // 12: gamepb.GameBroad
	(*GameEndData)(nil),           // 13: gamepb.GameEndData
	(*Rank)(nil),                  // 14: gamepb.Rank
	(*Player)(nil),                // 15: gamepb.Player
	(*PushReq)(nil),               // 16: gamepb.PushReq
	(*PushRes)(nil),               // 17: gamepb.PushRes
	(*ServerTimeRes)(nil),         // 18: gamepb.ServerTimeRes
	(*JumpReq)(nil),               // 19: gamepb.JumpReq
	(*GameProcessData)(nil),       // 20: gamepb.GameProcessData
	(*RankData)(nil),              // 21: gamepb.RankData
	(*RankQueryReq)(nil),          // 22: gamepb.RankQueryReq
	(*RankQueryResp)(nil),         // 23: gamepb.RankQueryResp
	(*GameBroad_Config)(nil),      // 24: gamepb.GameBroad.Config
	(*GameBroad_Setting)(nil),     // 25: gamepb.GameBroad.Setting
	(*timestamppb.Timestamp)(nil), // 26: google.protobuf.Timestamp
}
var file_proto_gamepb_game_proto_depIdxs = []int32{
	1,  // 0: gamepb.RefreshMemberReq.member:type_name -> gamepb.MemberType
	1,  // 1: gamepb.JoinRoomReq.member:type_name -> gamepb.MemberType
	1,  // 2: gamepb.JoinGameReq.member:type_name -> gamepb.MemberType
	2,  // 3: gamepb.GameBroad.game_status:type_name -> gamepb.GameStatus
	15, // 4: gamepb.GameBroad.players:type_name -> gamepb.Player
	20, // 5: gamepb.GameBroad.process_data:type_name -> gamepb.GameProcessData
	13, // 6: gamepb.GameBroad.end_data:type_name -> gamepb.GameEndData
	24, // 7: gamepb.GameBroad.config:type_name -> gamepb.GameBroad.Config
	25, // 8: gamepb.GameBroad.setting:type_name -> gamepb.GameBroad.Setting
	14, // 9: gamepb.GameEndData.rank_list:type_name -> gamepb.Rank
	1,  // 10: gamepb.Player.member:type_name -> gamepb.MemberType
	1,  // 11: gamepb.Player.srv_member:type_name -> gamepb.MemberType
	0,  // 12: gamepb.PushReq.cmd:type_name -> gamepb.CmdId
	0,  // 13: gamepb.PushRes.cmd:type_name -> gamepb.CmdId
	5,  // 14: gamepb.JumpReq.result:type_name -> gamepb.JumpReq.JumpResult
	3,  // 15: gamepb.GameProcessData.process:type_name -> gamepb.GameProcess
	4,  // 16: gamepb.RankQueryReq.name:type_name -> gamepb.LeaderboardType
	26, // 17: gamepb.RankQueryReq.date:type_name -> google.protobuf.Timestamp
	21, // 18: gamepb.RankQueryResp.data:type_name -> gamepb.RankData
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_gamepb_game_proto_init() }
func file_proto_gamepb_game_proto_init() {
	if File_proto_gamepb_game_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_gamepb_game_proto_rawDesc), len(file_proto_gamepb_game_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_gamepb_game_proto_goTypes,
		DependencyIndexes: file_proto_gamepb_game_proto_depIdxs,
		EnumInfos:         file_proto_gamepb_game_proto_enumTypes,
		MessageInfos:      file_proto_gamepb_game_proto_msgTypes,
	}.Build()
	File_proto_gamepb_game_proto = out.File
	file_proto_gamepb_game_proto_goTypes = nil
	file_proto_gamepb_game_proto_depIdxs = nil
}
